// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

generator nextAdmin {
  provider = "next-admin-generator-prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                            String         @id @default(auto()) @map("_id") @db.ObjectId
  avatar                        String?        @default("")
  email                         String?        @unique
  name                          String?
  password                      String?
  role                          Role           @default(BASIC)
  link                          String?
  gender                        Gender         @default(NONE)
  emailVerified                 Boolean?       @default(false)
  birthDate                     DateTime?
  subscribers                   Int            @default(0)
  about                         String?
  isArticleApprove              Boolean        @default(true)
  isComicsApprove               Boolean        @default(true)
  closedProfile                 Boolean        @default(false)
  closedSubscribers             Boolean        @default(false)
  comics                        Comics[]
  comments                      Comment[]
  accounts                      Account[]
  sessions                      Session[]
  Article                       Article[]
  ArticleImage                  ArticleImage[]
  showMatureContent             Boolean        @default(false)
  showNotificationsSubscribes   Boolean        @default(true)
  showNotificationsComments     Boolean        @default(true)
  showNotificationsPaidContent  Boolean        @default(true)
  showNotificationsLikes        Boolean        @default(true)
  showNotificationsGifts        Boolean        @default(true)
  showNotificationsNewPosts     Boolean        @default(true)
  showNotificationsListsReading Boolean        @default(true)
  showNotificationsListsRead    Boolean        @default(true)
  showNotificationsListsPlanned Boolean        @default(true)
  showNotificationsListsLiked   Boolean        @default(true)
  showNotificationsListsDropped Boolean        @default(true)
  emailNotificationsUpdates     Boolean        @default(true)
  emailNotificationsSurveys     Boolean        @default(true)
  emailNotificationsReports     Boolean        @default(true)
  residenceName                 String?
}

model Comics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      String
  covers      String[]
  banner      String
  genres      Genre[]
  focus       Focus[]
  tags        Tag[]
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String   @db.ObjectId
  rating      String
  toms        Tom[]
  createdAt   DateTime @default(now())
  isApproved  Boolean  @default(false)
}

model Tom {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  chapters Chapter[]
  comics   Comics    @relation(fields: [comicsId], references: [id], onDelete: Cascade)
  comicsId String    @db.ObjectId
}

model Chapter {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  tom      Tom      @relation(fields: [tomId], references: [id], onDelete: Cascade)
  tomId    String   @db.ObjectId
  images   String[]
  isRead   Boolean
  likes    Int
  timeCode String
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  replyId   String?   @db.ObjectId
  reply     Comment?  @relation("reply", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("reply")
  likes     Int
  createdAt DateTime  @default(now())
  User      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  user_id           Int?
  email             String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Article {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  createdAt   DateTime @default(now())
  description String
  cover       String?
  content     Json
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String   @db.ObjectId
  isApproved  Boolean  @default(false)
  authorName  String
  category    Category
}

model ArticleImage {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @unique
  image  Bytes
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Gender {
  NONE
  MALE
  FEMALE
}

enum Role {
  BASIC
  AUTHOR
  ADMIN
}

enum Category {
  SCENARIO
  LIFESTYLE
  CHARACTERS
  ENVIROMENT
  PROMOTION
  GRAPHIC
}

enum Tag {
  AU
  ANGST
  NSFW
  HURT_COMFORT
  PSYCHOLOGY
  CHARACTER_DEATH
  FRIENDSHIP
  VIOLENCE
  FANTASY
}

enum Focus {
  WEB_COMIC
  MANGA
  SINGLE
  MINI
  MAXI
  OMNIBUS
}

enum Genre {
  COMEDY
  ACTION
  DRAMA
  DETECTIVE
  THRILLER
  ROMANCE
  MELODRAMA
  DAILY_LIFE
  SPORT
  HORROR
  FANTASY_FICTION
  SCI_FI
  HISTORICAL_DRAMA
  HAREM
  CYBERPUNK
  STEAMPUNK
  SUPERHERO
  SPACE_OPERA
  APOCALYPSE
  POST_APOCALYPSE
  MARTIAL_ARTS
  IDOLS
  MECHA
  FAN_SERVICE
  ECHI
}
