// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

generator jsonSchema {
  provider              = "prisma-json-schema-generator"
  includeRequiredFields = "true"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  avatar            String?        @default("")
  email             String?        @unique
  name              String?
  password          String?
  role              Role           @default(BASIC)
  link              String?
  gender            Gender         @default(NONE)
  emailVerified     DateTime?
  subscribers       Int            @default(0)
  about             String?
  closedProfile     Boolean        @default(false)
  closedSubscribers Boolean        @default(false)
  comics            Comics[]
  comments          Comment[]
  accounts          Account[]
  sessions          Session[]
  Article           Article[]
  ArticleImage      ArticleImage[]
}

model Comics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      String
  covers      Bytes[]
  banner      Bytes
  genres      String[]
  focus       String[]
  labels      String[]
  age         String[]
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
  toms        Tom[]
}

model Tom {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  chapters Chapter[]
  comics   Comics    @relation(fields: [comicsId], references: [id])
  comicsId String    @db.ObjectId
}

model Chapter {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  tom      Tom     @relation(fields: [tomId], references: [id])
  tomId    String  @db.ObjectId
  images   Bytes[]
  isRidden Boolean
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  replyId   String?   @db.ObjectId
  reply     Comment?  @relation("reply", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("reply")
  likes     Int
  createdAt DateTime  @default(now())
  User      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Article {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  createdAt   DateTime @default(now())
  description String
  cover       String
  content     Json
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
  isApproved  Boolean
  authorName  String
}

model ArticleImage {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @unique
  image  Bytes
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Gender {
  NONE
  MALE
  FEMALE
}

enum Role {
  BASIC
  AUTHOR
  ADMIN
}
